const jwt = require("jsonwebtoken");
const User = require("../models/user.model"); // üîπ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶ì ‡¶Ø‡ßá User Model ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

const protect = async (req, res, next) => {
    try {
        const authHeader = req.headers.authorization;

        // üî• Token ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return res.status(401).json({ message: "No token provided" });
        }

        // üîπ Bearer ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
        const token = authHeader.split(" ")[1]; 

        // üîπ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßã
        const decoded = jwt.verify(token, process.env.JWT_SECRET); 

        // üîπ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
        const user = await User.findById(decoded.id).select("-password");
        if (!user) {
            return res.status(401).json({ message: "User not found" });
        }

        req.user = user; // üîπ req.user-‡¶è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡ßã
        next(); // ‚úÖ Middleware ‡¶∂‡ßá‡¶∑

    } catch (error) { 
        res.status(401).json({ message: "Not authorized, token failed" });
    }
};

module.exports = protect;
